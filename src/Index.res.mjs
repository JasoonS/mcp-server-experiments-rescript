// Generated by ReScript, PLEASE EDIT WITH CARE

import * as MCP_SDK from "./MCP_SDK.res.mjs";
import * as Calculator from "./examples/Calculator.res.mjs";
import * as Stdlib_Exn from "rescript/lib/es6/Stdlib_Exn.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";
import * as McpJs from "@modelcontextprotocol/sdk/server/mcp.js";
import * as StdioJs from "@modelcontextprotocol/sdk/server/stdio.js";

let server = new McpJs.McpServer({
  name: "mcp-server-starter",
  version: "0.1.0",
  capabilities: {
    tools: {},
    resources: {},
    prompts: {},
    streaming: true
  }
});

function logMessage(level, message) {
  console.error("[" + level.toUpperCase() + "] " + message);
}

function getErrorMessage(error) {
  if (error.RE_EXN_ID === Stdlib_Exn.$$Error) {
    return Core__Option.getOr(error._1.message, "Unknown error");
  } else {
    return "Unknown error";
  }
}

MCP_SDK.Process.onUncaughtException(process, error => {
  logMessage("error", "Uncaught error: " + getErrorMessage(error));
  console.error("Server error:", error);
});

try {
  Calculator.registerCalculatorTool(server);
  logMessage("info", "Successfully registered all tools");
} catch (raw_error) {
  let error = Primitive_exceptions.internalToException(raw_error);
  logMessage("error", "Failed to register tools: " + getErrorMessage(error));
  process.exit(1);
}

async function cleanup() {
  try {
    await server.close();
    logMessage("info", "Server shutdown completed");
  } catch (raw_error) {
    let error = Primitive_exceptions.internalToException(raw_error);
    logMessage("error", "Error during shutdown: " + getErrorMessage(error));
  }
  process.exit(0);
}

MCP_SDK.Process.onSIGTERM(process, cleanup);

MCP_SDK.Process.onSIGINT(process, cleanup);

async function main() {
  try {
    let transport = new StdioJs.StdioServerTransport();
    await server.connect(transport);
    logMessage("info", "MCP Server started successfully");
    console.error("MCP Server running on stdio transport");
    return;
  } catch (raw_error) {
    let error = Primitive_exceptions.internalToException(raw_error);
    logMessage("error", "Failed to start server: " + getErrorMessage(error));
    process.exit(1);
    return;
  }
}

Core__Promise.$$catch(main(), error => {
  console.error("Fatal error in main():", error);
  process.exit(1);
  return Promise.resolve();
});

export {
  server,
  logMessage,
  getErrorMessage,
  cleanup,
  main,
}
/* server Not a pure module */
