// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zod from "zod";
import * as Stdlib_Exn from "rescript/lib/es6/Stdlib_Exn.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

let TextError = /* @__PURE__ */Primitive_exceptions.create("TextTool.TextError");

function countWords(text) {
  if (text.trim() === "") {
    return 0;
  } else {
    return text.trim().split(" ").filter(word => word !== "").length;
  }
}

function countChars(text, includeWhitespace) {
  if (includeWhitespace) {
    return text.length;
  } else {
    return text.replace(/\s/g, "").length;
  }
}

function registerTextTools(server) {
  let props = {
    text: Zod.z.string().describe("Text to count words in")
  };
  let wordCountSchema = Zod.z.object(props);
  server.tool("word_count", "Count the number of words in a text", wordCountSchema.shape, async params => {
    try {
      let count = countWords(params.text);
      return {
        content: [{
            type: "text",
            text: count.toString()
          }]
      };
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== TextError) {
        return {
          content: [{
              type: "text",
              text: "Unexpected error: " + Core__Option.getOr(Core__Option.flatMap(Stdlib_Exn.asJsExn(exn), e => e.message), "Unknown error")
            }],
          isError: true
        };
      }
      let msg = exn._1;
      if (typeof msg !== "object") {
        return {
          content: [{
              type: "text",
              text: "0"
            }]
        };
      } else {
        return {
          content: [{
              type: "text",
              text: "Error processing text: " + msg._0
            }],
          isError: true
        };
      }
    }
  });
  let props$1 = {
    text: Zod.z.string().describe("Text to count characters in"),
    includeWhitespace: Zod.z.boolean().describe("Whether to include whitespace in the count (default: false)")
  };
  let charCountSchema = Zod.z.object(props$1);
  server.tool("char_count", "Count the number of characters in a text", charCountSchema.shape, async params => {
    try {
      let count = countChars(params.text, params.includeWhitespace);
      return {
        content: [{
            type: "text",
            text: count.toString()
          }]
      };
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== TextError) {
        return {
          content: [{
              type: "text",
              text: "Unexpected error: " + Core__Option.getOr(Core__Option.flatMap(Stdlib_Exn.asJsExn(exn), e => e.message), "Unknown error")
            }],
          isError: true
        };
      }
      let msg = exn._1;
      if (typeof msg !== "object") {
        return {
          content: [{
              type: "text",
              text: "0"
            }]
        };
      } else {
        return {
          content: [{
              type: "text",
              text: "Error processing text: " + msg._0
            }],
          isError: true
        };
      }
    }
  });
}

export {
  TextError,
  countWords,
  countChars,
  registerTextTools,
}
/* zod Not a pure module */
