// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zod from "zod";
import * as Stdlib_Exn from "rescript/lib/es6/Stdlib_Exn.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

let CalculationError = /* @__PURE__ */Primitive_exceptions.create("Calculator.CalculationError");

function registerCalculatorTool(server) {
  let props = {
    a: Zod.z.number().finite().safe().describe("First number for calculation"),
    b: Zod.z.number().finite().safe().describe("Second number for calculation"),
    operation: Zod.z.enum([
      "add",
      "subtract",
      "multiply",
      "divide"
    ]).describe("The arithmetic operation to perform")
  };
  let calculatorSchema = Zod.z.object(props);
  let performCalculation = params => {
    let match = params.operation;
    switch (match) {
      case "add" :
        return params.a + params.b;
      case "subtract" :
        return params.a - params.b;
      case "multiply" :
        return params.a * params.b;
      case "divide" :
        if (params.b === 0.0) {
          throw {
            RE_EXN_ID: CalculationError,
            _1: "DivisionByZero",
            Error: new Error()
          };
        }
        return params.a / params.b;
    }
  };
  server.tool("calculate", "Perform basic arithmetic operations", calculatorSchema.shape, async params => {
    let response;
    try {
      let result = performCalculation(params);
      if (!Number.isFinite(result)) {
        throw {
          RE_EXN_ID: CalculationError,
          _1: "OverUnderflow",
          Error: new Error()
        };
      }
      response = {
        content: [{
            type: "text",
            text: result.toString()
          }]
      };
    } catch (raw_jsExn) {
      let jsExn = Primitive_exceptions.internalToException(raw_jsExn);
      if (jsExn.RE_EXN_ID === CalculationError) {
        switch (jsExn._1) {
          case "DivisionByZero" :
            response = {
              content: [{
                  type: "text",
                  text: "Division by zero is not allowed"
                }],
              isError: true
            };
            break;
          case "InvalidOperation" :
            response = {
              content: [{
                  type: "text",
                  text: "Invalid operation"
                }],
              isError: true
            };
            break;
          case "OverUnderflow" :
            response = {
              content: [{
                  type: "text",
                  text: "Result is too large or small to represent"
                }],
              isError: true
            };
            break;
        }
      } else if (jsExn.RE_EXN_ID === Stdlib_Exn.$$Error) {
        response = {
          content: [{
              type: "text",
              text: "Calculation error: " + Core__Option.getOr(jsExn._1.message, "Unknown error")
            }],
          isError: true
        };
      } else {
        throw jsExn;
      }
    }
    console.error(response);
    return response;
  });
}

export {
  CalculationError,
  registerCalculatorTool,
}
/* zod Not a pure module */
